/// A generic context for unicode definitions.
public 
enum UnicodeEncoding<Location, Terminal> 
{
}
extension UnicodeEncoding where Terminal:ASCIITerminal 
{
    /// Parses a newline; either a ``Linefeed`` or a ``CarriageReturn`` followed by a 
    /// ``Linefeed``.
    public 
    enum Newline:ParsingRule 
    {
        @inlinable public static 
        func parse<Diagnostics>(_ input:inout ParsingInput<Diagnostics>) throws 
            where   Diagnostics:ParsingDiagnostics,
                    Diagnostics.Source.Index == Location,
                    Diagnostics.Source.Element == Terminal
        {
            if case nil = input.parse(as: Linefeed?.self) 
            {
                try input.parse(as: (CarriageReturn, Linefeed).self)
            }
        }
    }

    @matrix(
        __Name__: 
        [
            StartOfHeader,
            Quote,
            And,
            Minus,
        ],
        __Target__:
        [
            StartOfHeading,
            DoubleQuote,
            Ampersand,
            Hyphen,
        ])
    @available(*, deprecated)
    public 
    typealias __Name__ = __Target__ 

    @matrix(
        __Name__: 
        [
            Pound,
            Apostrophe,
            HyphenMinus,
            FullStop,
            Solidus,
            LessThan, 
            GreaterThan,
            VerticalBar,
        ],
        __Target__:
        [
            Hashtag,
            SingleQuote,
            Hyphen,
            Period,
            Slash,
            AngleLeft,
            AngleRight,
            Pipe,
        ])
    @available(*, unavailable)
    public 
    typealias __Name__ = __Target__ 

    /// Matches the ASCII/Unicode codepoint [`\(__codepoint__)`]().
    /// 
    /// All ``ASCIITerminal`` types can match a(n) `\(__Name__)` character.
    @matrix(
        __Name__: 
        [
            Null, 
            StartOfHeading,
            StartOfText,
            EndOfText,
            EndOfTransmission,
            Enquiry,
            Acknowledgement,
            Bell,
            Backspace,
            HorizontalTab,
            Linefeed,
            VerticalTab,
            Formfeed,
            CarriageReturn,
            ShiftOut,
            ShiftIn,
            DataLinkEscape,
            DeviceControl1,
            DeviceControl2,
            DeviceControl3,
            DeviceControl4,
            NegativeAcknowledgement,
            SynchronousIdle,
            EndOfTransmissionBlock,
            Cancel,
            EndOfMedium,
            Substitute,
            Escape,
            FileSeparator,
            GroupSeparator,
            RecordSeparator,
            UnitSeparator,

            Space,
            Exclamation,
            DoubleQuote,
            Hashtag,
            Dollar,
            Percent,
            Ampersand,
            SingleQuote,
            ParenthesisLeft,
            ParenthesisRight,
            Asterisk,
            Plus,
            Comma,
            Hyphen,
            Period,
            Slash,

            Zero,
            One,
            Two,
            Three,
            Four,
            Five,
            Six,
            Seven,
            Eight,
            Nine,

            Colon,
            Semicolon,
            AngleLeft,
            Equals,
            AngleRight,
            Question,
            At,

            BracketLeft,
            Backslash,
            BracketRight,
            Caret,
            Underscore,
            Backtick,

            BraceLeft,
            Pipe,
            BraceRight,
            Tilde, 

            Delete,
        ], 
        __codepoint__:
        [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,

            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 

                                                                              0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60,
                                                                              0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        ])
    public
    enum __Name__:LiteralRule
    {
        @inlinable public static 
        var literal:CollectionOfOne<Terminal> { .init(.init(__codepoint__)) }
    }

    /// Matches the letter `'\(__Letter__)'`, without case-sensitivity.
    /// 
    /// All ``ASCIITerminal`` types can match the letter `'\(__Letter__)'`.
    /// The two valid codepoint values are [`\(__uppercase__)`]() (`'\(__Letter__)'`) 
    /// and [`\(__lowercase__)`]() (`'\(__letter__)'`).
    /// 
    /// To match `'\(__Letter__)'` or `'\(__letter__)'` exactly, use the 
    /// ``UnicodeEncoding//\(__Letter__)/Uppercase`` or 
    /// ``UnicodeEncoding//\(__Letter__)/Lowercase`` rules.
    @matrix(
    __Letter__: 
    [
        A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
    ], 
    __letter__: 
    [
        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z,
    ], 
    __uppercase__:
    [
              0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
    ],
    __lowercase__:
    [
              0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
    ])
    public 
    enum __Letter__:TerminalRule
    {
        /// Matches the lowercase letter `'\(__letter__)'`.
        /// 
        /// All ``ASCIITerminal`` types can match the letter `'\(__letter__)'` 
        /// ([`\(__lowercase__)`]()).
        public
        enum Lowercase:LiteralRule 
        {
            @inlinable public static 
            var literal:CollectionOfOne<Terminal> { .init(.init(__lowercase__)) }
        }
        /// Matches the uppercase letter `'\(__Letter__)'`.
        /// 
        /// All ``ASCIITerminal`` types can match the letter `'\(__Letter__)'` 
        /// ([`\(__uppercase__)`]()).
        public
        enum Uppercase:LiteralRule 
        {
            @inlinable public static 
            var literal:CollectionOfOne<Terminal> { .init(.init(__uppercase__)) }
        }
        
        public 
        typealias Construction  = Void

        @inlinable public static 
        func parse(terminal:Terminal) -> Void?
        {
            switch terminal 
            {
            case .init(__uppercase__), .init(__lowercase__): 
                return ()
            default:
                return nil
            }
        }
    }
}